swagger: '2.0'

host: localhost:8080
basePath: /

info:
  version: 1.0.0
  title: Central de Erros API
  description: Store and retrieve application logs from other applications
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'

components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:

  /users/logs:
    get:
      security:
        - bearerAuth: []
      summary: Get all logs
      description: Find and retrieve all the logs sotred by the user. Is necessary to especify 'Bearer' Token.
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: You need pass the Authorization header using the Bearer schema.
          schema:
            type: string
            required: true
            example: Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              total: 
                type: number
                example: 1
              Logs:
                type: array
                items:
                  $ref: '#/definitions/Log'
        _200:
          description: Returns a message that did not find the logs 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: There are no logs
        401:
          description: Returns Unauthorized
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid token
        _401:
          description: Returns Unauthorized
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Token not provided
        500:
          description: Returns the message stating that an error has occurred on the server
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error

  /users/signup:
    post:
      summary: Create user
      description: Create a new user account to get access to the API
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              name:
                type: string
                example: João da Silva
              email:
                type: string
                example: joao@email.com.br
              password:
                type: string
                example: "123456"
      responses:
        201:
          description: User successfully created
          schema:
            $ref: '#/definitions/User'

  /users/signin:
    post:
      summary: User login
      description: Authenticate an existing user returning a token for API requests
      produces:
       - application/json
      parameters:
        - in: body
          name: User credentials
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: joao@email.com.br
              password:
                type: string
                format: password
                example: "123456"
      responses:
        200:
          description: Returns the token in the request body 
          produces:
            - application/json
          schema:
            type: object
            properties:
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOnsiaWQiOjJ9LCJpYXQiOjE1ODUxNjkwMjMsImV4cCI6MTU4NTI1NTQyM30.wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
        400:
          description: Returns Bad Request 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found
        406:
          description: Returns Not Acceptable 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: You are input wrong data then necessary
        _406:
          description: Returns Not Acceptable 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Data values are not valid
        401:
          description: Returns Unauthorized 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Incorrect password
        500:
          description: Returns the message stating that an error has occurred on the server
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error

  /users/restore:
    post:
      summary: Restore user account
      description: Reactivates a previouly disabled user account
      responses:
        200:
          description: OK


  /users:
    patch:
      summary: Update user
      description: Update an authenticated user with the new information provided in request body
      consumes:
        - application/json
      produces:
       - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              name:
                type: string
                example: João da Silva
              email:
                type: string
                example: joao@email.com.br
    delete:
      summary: Disable user
      description: Executes a soft delete disabling the user account
      responses:
        200:
          description: OK


  /users/hard:
    delete:
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: You need pass the Authorization header using the Bearer schema.
          schema:
            type: string
            required: true
            example: Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
      summary: Delete user forever
      description: Remove user account and all the logs associated with it from the database. This action cannot be undone. The user id will be provided by the token.
      responses:
        200:
          description: Returns the body with a message of deletation 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Deleted successfully, this action cannot be undone
        _200:
          description: Returns a message that did not find a user 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: There is no user
        500:
          description: Returns the message stating that an error has occurred on the server
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error


  /logs/sender/{senderApplication}:
    get:
      summary: Get logs by application
      description: Get all the logs for the application passed in the url parameter
      parameters:
        - in: path
          name: senderApplication
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'


  /logs/environment/{environment}:
    get:
      summary: Get logs by environment
      description: Get all the logs with the same environment passed in the url parameter
      parameters:
        - in: path
          name: environment
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'


  /logs/level/{level}:
    get:
      security:
          - bearerAuth: []
      summary: Get logs by level
      description: Get all the logs with the same level passed in the url parameter
      parameters:
        - in: path
          name: level
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'


  /logs:
     post:
      security:
        - bearerAuth: []
      summary: Create logs
      description: Creates a new log associated with a user. The user id is provided by the token.
      consumes:
        - application/json        
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: You need pass the Authorization header using the Bearer schema.
          schema:
            type: string
            required: true
            example: Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
        - in: body
          name: Logs body
          schema:
            type: object
            properties:
              level:
                type: string
                example: WARN
              description:
                type: string
                example: Application restarted
              senderApplication:
                type: string
                example: Server load monitor
              sendDate:
                type: string
                example: 11/26/2019 15:00
              environment:
                type: string
                example: homologation
      responses:
        200:
          description: Returns OK
          produces:
            - application/json
          schema:
            type: object
            properties:
              createdLog:
                type: object
                properties:
                    id:
                      type: number
                      example: 1
                    level: 
                      type: string
                      example: WARN
                    description: 
                      type: string
                      example: Application restarted
                    senderApplication: 
                      type: string
                      example: Server load monitor
                    sendDate: 
                      type: string
                      example: 11/26/2019 15:00
                    environment: 
                      type: string
                      example: homologation
                    UserId:
                      type: number
                      example: 1
                    updatedAt:
                      type: date-time
                      example: 2020-03-26T00:21:40.039Z
                    createdAt: 
                      type: date-time
                      example: 2020-03-26T00:21:40.039Z
        406:
          description: Returns Not Acceptable 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Ivalid data
        500:
          description: Returns the message stating that an error has occurred on the server
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error


  /logs/id/{id}:
    delete:
      summary: Delete log
      description: Delete the log with the id passed in the url
      parameters:
        - in: path
          name: id
          type: string
          required: true
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/definitions/Log'


  /logs/all:
    delete:
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: You need pass the Authorization header using the Bearer schema.
          schema:
            type: string
            required: true
            example: Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
      summary: Soft Delete for all logs from user. 
      description: Delete al the logs from a user. The user id will be provided by the token.
      responses:
        200:
          description: Returns the body with a message of deletation 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Deleted successfully
        _200:
          description: Returns a message that did not find the logs 
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: There are no logs
        401:
          description: Returns Unauthorized
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid token
        _401:
          description: Returns Unauthorized
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Token not provided
        500:
          description: Returns the message stating that an error has occurred on the server
          produces:
            - application/json
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error

  /logs/all/hard:
      delete:
        security:
          - bearerAuth: []
        produces:
          - application/json
        parameters:
          - in: header
            name: Authorization
            description: You need pass the Authorization header using the Bearer schema.
            schema:
              type: string
              required: true
              example: Bearer wgioiERBtXR6CXppvSyKV0MhFu28TKgfw94JvNEuDHA
        summary: Hard Delete for all logs from user. 
        description: Delete al the logs from a user forever. This action cannot be undone. The user id will be provided by the token.
        responses:
          200:
            description: Returns the body with a message of deletation 
            produces:
              - application/json
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Deleted successfully, this action cannot be undone
          _200:
            description: Returns a message that did not find the logs 
            produces:
              - application/json
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: There are no logs
          401:
            description: Returns Unauthorized
            produces:
              - application/json
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Invalid token
          _401:
            description: Returns Unauthorized
            produces:
              - application/json
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Token not provided
          500:
            description: Returns the message stating that an error has occurred on the server
            produces:
              - application/json
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Internal Server Error

definitions:
  User:
    type: object
    properties:
      name:
        type: string
        example: João da Silva
      email:
        type: string
        example: joao@email.com.br
      password:
        type: string
        format: password
        example: "123456"
    required:
      - name
      - email
      - password
  
  Log:
    type: object
    properties:
      level:
        type: string
        enum: [FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL, OFF]
        example: WARN
      description:
        type: string
        example: Application restarted
      senderApplication:
        type: string
        example: Server load monitor
      sendDate:
        type: string
      environment:
        type: string
        enum: [production, homologation]
        example: homologation
    required: 
      - level
      - description
      - senderApplication
      - sendDate
      - environment
      - userId

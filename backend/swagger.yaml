swagger: '2.0'

host: localhost:8080
basePath: /

info:
  version: 1.0.0
  title: Central de Erros API
  description: Store and retrieve application logs from other applications
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'

components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:

  /users/logs:
    get:
      security:
        - bearerAuth: []
      summary: Get all logs
      description: Find and retrieve all the logs sotred by the user. Is necessary to especify 'Bearer' Token.
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'

  /users/signup:
    post:
      summary: Create user
      description: Create a new user account to get access to the API
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              name:
                type: string
                example: Jo達o da Silva
              email:
                type: string
                example: joao@email.com.br
              password:
                type: string
                example: "123456"
      responses:
        201:
          description: Returns the name, email and date when the user was created
          schema:
            $ref: '#/create_200'
        406:
          description: Returns the message stating that the data sent is invalid
          schema:
            $ref: '#/create_406'
        409:
          description: Returns the message stating that the email already exists
          schema:
            $ref: '#/create_409'
        500:
          description: Returns the message stating that an error has occurred on the server
          schema:
            $ref: '#/error_500'

  /users/signin:
    post:
      summary: User login
      description: Authenticate an existing user returning a token for API requests
      produces:
       - string
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              email:
                type: string
                example: joao@email.com.br
              password:
                type: string
                example: "123456"
      responses:
        200:
          description: OK

  /users/restore:
    post:
      summary: Restore user account
      description: Reactivates a previouly disabled user account
      responses:
        200:
          description: OK

  /users:
    patch:
      summary: Update user
      description: Update an authenticated user with the new information provided in request body
      consumes:
        - application/json
      produces:
       - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              name:
                type: string
                example: Jo達o da Silva
              email:
                type: string
                example: joao@email.com.br
    delete:
      security:
        - bearerAuth: []
      summary: Disable user
      description: Executes a soft delete disabling the user account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            required: true
      responses:
        200_:
          description: Returns the message stating that the user no longer exists
          schema:
            $ref: '#/delete_200_'
        200:
          description: Returns the message stating that the user has been deleted
          schema:
            $ref: '#/delete_200'
        500:
          description: Returns the message stating that an error has occurred on the server
          schema:
            $ref: '#/error_500'

  /users/hard:
    delete:
      summary: Delete user
      description: Remove user account and all the logs associated with it
      responses:
        200:
          description: OK

  /logs/sender/{senderApplication}:
    get:
      summary: Get logs by application
      description: Get all the logs for the application passed in the url parameter
      parameters:
        - in: path
          name: senderApplication
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'

  /logs/environment/{environment}:
    get:
      summary: Get logs by environment
      description: Get all the logs with the same environment passed in the url parameter
      parameters:
        - in: path
          name: environment
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'

  /logs/level/{level}:
    get:
      security:
        - bearerAuth: []
      summary: Get logs by level
      description: Get all the logs with the same level passed in the url parameter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            required: true
        - in: path
          name: level
          schema:
            type: string
            required: true
      responses:
        200:
          description: Returns all logs by level
          schema:
            $ref: '#/getByLevel_200'
        200_:
          description: Returns the message stating that there are no logs
          schema:
            $ref: '#/getByLevel_200_'
        500:
          description: Returns the message stating that an error has occurred on the server
          schema:
            $ref: '#/error_500'
  /logs:
    post:
      summary: nonono
      description: nonono
      responses:
        200:
          description: OK
  /logs/id/{id}:
    delete:
      security:
        - bearerAuth: []
      summary: Delete log
      description: Delete the log with the id passed in the url
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            required: true
        - in: path
          name: id
          schema:
            type: string
            required: true
      responses:
        200:
          description: Returns the message stating that the log has been deleted
          schema:
            $ref: '#/deleteById_200'
        200_:
          description: Returns the message stating that there is no log
          schema:
            $ref: '#/deleteById_200'
        500:
          description: Returns the message stating that an error has occurred on the server
          schema:
            $ref: '#/error_500'

  /logs/all:
    delete:
      summary: Delete logs
      description: Delete all the logs created by the user
      responses:
        200:
          description: OK

# return patterns for logs
create_200:
  type: object
  properties:
    message:
      type: string
      example: User created successfully
    data:
      type: string
      example:
        userName: Jo達o da Silva 
        userEmail: joao@email.com.br
        createdAt: '2020-03-25T22:21:34.759Z'
create_406:
  type: object
  properties:
    message:
      type: string
      example: Invalid data
create_409:
  type: object
  properties:
    message:
      type: string
      example: User email already exists
delete_200_:
  type: object
  properties:
    message:
      type: string
      example: There is no user
delete_200:
  type: object
  properties:
    message:
      type: string
      example: Deleted succesfully
getByLevel_200:
  type: object
  properties:
    id:
      type: number
      example: 1
    level: 
      type: string
      example: WARN
    description: 
      type: string
      example: Application restarted
    senderApplication: 
      type: string
      example: Server load monitor
    sendDate: 
      type: string
      example: 11/26/2019 15:00
    environment: 
      type: string
      example: homologation
    UserId:
      type: number
      example: 1
    updatedAt:
      type: date-time
      example: 2020-03-26T00:21:40.039Z
    createdAt: 
      type: date-time
      example: 2020-03-26T00:21:40.039Z
getByLevel_200_:
  type: object
  properties:
    message:
      type: string
      example: There are no logs
deleteById_200:
  type: object
  properties:
    message:
      type: string
      example: Deleted successfully
deleteById_200_:
  type: object
  properties:
    message:
      type: string
      example: There is no logs
error_500:
  type: object
  properties:
    message:
      type: string
      example: Internal Server Error
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 123
      name:
        type: string
        example: Jo達o da Silva
      email:
        type: string
        example: joao@email.com.br
      password:
        type: string
        format: password
        example: 652a80db6fab5930dabf7d4fb7db5d67
    required:
      - name
      - email
      - password
  Log:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 321
      level:
        type: string
        enum: [FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL, OFF]
        example: WARN
      description:
        type: string
        example: Application restarted
      senderApplication:
        type: string
        example: Server load monitor
      sendDate:
        type: string
      environment:
        type: string
        enum: [production, homologation]
        example: homologation
      userId:
        type: integer
        example: 123
    required: 
      - level
      - description
      - senderApplication
      - sendDate
      - environment
      - userId
